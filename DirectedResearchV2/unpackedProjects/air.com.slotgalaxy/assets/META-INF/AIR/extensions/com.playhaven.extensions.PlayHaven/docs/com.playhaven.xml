<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.playhaven"><apiName>com.playhaven</apiName><apiDetail/><apiClassifier id="com.playhaven:PlayHaven"><apiName>PlayHaven</apiName><shortdesc> PlayHaven Extension </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc> PlayHaven Extension </apiDesc></apiClassifierDetail><adobeApiEvent id="com.playhaven:PlayHaven_com.playhaven.events.PlayHavenEvent.VGP_PURCHASE_REPORT_FAILED_VGP_PURCHASE_REPORT_FAILED"><apiName>VGP_PURCHASE_REPORT_FAILED</apiName><shortdesc>
 Dispatched when an in-app purchase report of a VGP request has failed
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.playhaven.events.PlayHavenEvent.VGP_PURCHASE_REPORT_FAILED</apiEventType><adobeApiEventClassifier>com.playhaven.events.PlayHavenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when an in-app purchase report of a VGP request has failed
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.playhaven:PlayHaven_com.playhaven.events.PlayHavenEvent.VGP_PURCHASE_REPORTED_VGP_PURCHASE_REPORTED"><apiName>VGP_PURCHASE_REPORTED</apiName><shortdesc>
 Dispatched when an in-app purchase resolution to a VGP request is successfully reported
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.playhaven.events.PlayHavenEvent.VGP_PURCHASE_REPORTED</apiEventType><adobeApiEventClassifier>com.playhaven.events.PlayHavenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when an in-app purchase resolution to a VGP request is successfully reported
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.playhaven:PlayHaven_com.playhaven.events.PlayHavenEvent.VGP_PURCHASE_REQUESTED_VGP_PURCHASE_REQUESTED"><apiName>VGP_PURCHASE_REQUESTED</apiName><shortdesc>
 Dispatched when an In-App Purchase VGP is Requested by content unit
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.playhaven.events.PlayHavenEvent.VGP_PURCHASE_REQUESTED</apiEventType><adobeApiEventClassifier>com.playhaven.events.PlayHavenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when an In-App Purchase VGP is Requested by content unit
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.playhaven:PlayHaven_com.playhaven.events.PlayHavenEvent.REWARD_UNLOCKED_REWARD_UNLOCKED"><apiName>REWARD_UNLOCKED</apiName><shortdesc>
 Dispatched when a Reward is Unlocked
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.playhaven.events.PlayHavenEvent.REWARD_UNLOCKED</apiEventType><adobeApiEventClassifier>com.playhaven.events.PlayHavenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when a Reward is Unlocked
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.playhaven:PlayHaven_com.playhaven.events.PlayHavenEvent.METADATA_FAILED_METADATA_FAILED"><apiName>METADATA_FAILED</apiName><shortdesc>
 Dispatched when a Metadata request Failed
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.playhaven.events.PlayHavenEvent.METADATA_FAILED</apiEventType><adobeApiEventClassifier>com.playhaven.events.PlayHavenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when a Metadata request Failed
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.playhaven:PlayHaven_com.playhaven.events.PlayHavenEvent.METADATA_LOADED_METADATA_LOADED"><apiName>METADATA_LOADED</apiName><shortdesc>
 Dispatched when a Metadata request Loaded
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.playhaven.events.PlayHavenEvent.METADATA_LOADED</apiEventType><adobeApiEventClassifier>com.playhaven.events.PlayHavenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when a Metadata request Loaded
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.playhaven:PlayHaven_com.playhaven.events.PlayHavenEvent.CONTENT_OVERLAY_FAILED_CONTENT_FAILED"><apiName>CONTENT_FAILED</apiName><shortdesc>
 DispatcDispatched when a Content Overlay failed 
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.playhaven.events.PlayHavenEvent.CONTENT_OVERLAY_FAILED</apiEventType><adobeApiEventClassifier>com.playhaven.events.PlayHavenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 DispatcDispatched when a Content Overlay failed 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.playhaven:PlayHaven_com.playhaven.events.PlayHavenEvent.CONTENT_OVERLAY_DISMISSED_DID_DISMISS_CONTENT"><apiName>DID_DISMISS_CONTENT</apiName><shortdesc>
 Dispatched when a content Overlay has been dismissed
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.playhaven.events.PlayHavenEvent.CONTENT_OVERLAY_DISMISSED</apiEventType><adobeApiEventClassifier>com.playhaven.events.PlayHavenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when a content Overlay has been dismissed
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.playhaven:PlayHaven_com.playhaven.events.PlayHavenEvent.CONTENT_OVERLAY_DISPLAYED_DID_DISPLAY_CONTENT"><apiName>DID_DISPLAY_CONTENT</apiName><shortdesc>
 Dispatched when a content overlay has been displayed 
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.playhaven.events.PlayHavenEvent.CONTENT_OVERLAY_DISPLAYED</apiEventType><adobeApiEventClassifier>com.playhaven.events.PlayHavenEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when a content overlay has been displayed 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="com.playhaven:PlayHaven:PlayHaven"><apiName>PlayHaven</apiName><shortdesc> Do Not call this directly; use PlayHaven.create() or PlayHaven.playhaven to get current instance.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>token</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>secret</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>secondToken</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>secondSecret</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>logCallback</apiItemName><apiType value="Function"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc> Do Not call this directly; use PlayHaven.create() or PlayHaven.playhaven to get current instance. </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.playhaven:PlayHaven:com.playhaven:__setBaseURL"><apiName>__setBaseURL</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.playhaven:PlayHaven:createNotificationBadge"><apiName>createNotificationBadge</apiName><shortdesc>
	 Creates a DisplayObject that renders a notification 'badge' number for the given placement id.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a NotificationBadge instance, which is DisplayObject and can be added to the DisplayList
	 </apiDesc><apiOperationClassifier>com.playhaven.ui:NotificationBadge</apiOperationClassifier></apiReturn><apiParam><apiItemName>placementId</apiItemName><apiType value="String"/><apiDesc>the placementId, set in the PlayHaven dashboard, for which to create a notification badge
	 </apiDesc></apiParam><apiParam><apiItemName>badgeRenderer</apiItemName><apiOperationClassifier>com.playhaven.ui:NotificationBadgeRenderer</apiOperationClassifier><apiData>null</apiData><apiDesc>if set, use the given custom renderer instead of the default red circle
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Creates a DisplayObject that renders a notification 'badge' number for the given placement id.
	 
	 For content displayed by a user button interaction (for instance, a More Games widget), you should create a notification badge and attach it to the button to notify the user of an update and drive more clicks.  The NotificationBadge will display a red circle with the number of updates inside it.
	 
	 If you wish to design your own notification badge, implement PlayHavenNotificationRenderer and pass your instance to createNotificationBadge.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.playhaven.ui.xml#NotificationBadgeRenderer"><linktext>com.playhaven.ui.NotificationBadgeRenderer</linktext></link></related-links></apiOperation><apiOperation id="com.playhaven:PlayHaven:create"><apiName>create</apiName><shortdesc>
	 Initializes the PlayHaven Extension.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if PlayHaven has already been initialized.
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>initialized instance of PlayHaven extension interface.
	 </apiDesc><apiOperationClassifier>com.playhaven:PlayHaven</apiOperationClassifier></apiReturn><apiParam><apiItemName>token</apiItemName><apiType value="String"/><apiDesc>your PlayHaven Publisher Token
	 </apiDesc></apiParam><apiParam><apiItemName>secret</apiItemName><apiType value="String"/><apiDesc>your PlayHaven publisher Secret
	 </apiDesc></apiParam><apiParam><apiItemName>secondToken</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>an optional second platform token - if targeting both Android and iOS, put your Android token here and your iOS token first
	 </apiDesc></apiParam><apiParam><apiItemName>secondSecret</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>an optional second platform secret - if targeting both android and iOS, put your Android token here and your iOS token first
	 </apiDesc></apiParam><apiParam><apiItemName>logCallback</apiItemName><apiType value="Function"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
	 Initializes the PlayHaven Extension.  You should check PlayHaven.isSupported() first to ensure the platform is supported.
	 PlayHaven is a Singleton and you may have only one instance.  After creation, you may access the instance through
	 the static property PlayHaven.playhaven .
	 
	 If developing for only iOS or only Android, enter your target platform's token and secret (from the PlayHaven Dashboard) as the first and second parameter.
	 
	 If developing for both iOS AND Android, from the same code base, enter your tokens and secrets for each platform in the order iOS Token, iOS Secret, Android Token, Android Secret.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.playhaven:PlayHaven:isSupported"><apiName>isSupported</apiName><shortdesc> Determine if the current platform supports the extension.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Determine if the current platform supports the extension. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.playhaven:PlayHaven:preloadContentRequest"><apiName>preloadContentRequest</apiName><shortdesc>
	 Starts the preloading of a content request for the given placementId.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>placementId</apiItemName><apiType value="String"/><apiDesc>the placement id, set in the PlayHaven dashboard, for which to preload content
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Starts the preloading of a content request for the given placementId.
	 
	 Content requests may be slow to load on mobile data connections.  Optionally, you may call preloadContentRequest at the beginning of your app for a complex placement you expect to be displayed later on; this way, when sendContentRequest is called later for the given placementId, the content will already be loaded and can be displayed to the user more quickly.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.playhaven:PlayHaven:reportGameOpen"><apiName>reportGameOpen</apiName><shortdesc>
	 Report the start of the game session to PlayHaven's servers.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Report the start of the game session to PlayHaven's servers.  You may call this once when your app opens; the extension will automatically handle reporting future events of your application coming to the foreground.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.playhaven:PlayHaven:reportVGPPurchaseResolution"><apiName>reportVGPPurchaseResolution</apiName><shortdesc>
	 When integrating in-app purchases via another extension, and tracking VGP, use this method after a purchase has completed to notify the PlayHaven server of the purchase.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if resolution is not one of PHPurchaseResolution.BUY, PHPurchaseResolution.ERROR, PHPurchaseResolution.CANCEL, or PHPurchaseResolution.FAILURE
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>purchase</apiItemName><apiOperationClassifier>com.playhaven:PHPurchase</apiOperationClassifier><apiDesc>the PHPurchase object being resolved, retrieved from a prior PlayHavenEvent.PURCHASE_REQUESTED event's purchase property
	 </apiDesc></apiParam><apiParam><apiItemName>resolution</apiItemName><apiType value="String"/><apiDesc>the resolution of the transaction; one of PHPurchaseResolution constants
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 When integrating in-app purchases via another extension, and tracking VGP, use this method after a purchase has completed to notify the PlayHaven server of the purchase.  You must pass in the same PHPurchase object retrieved in the purchase property of a PlayHavenEvent.PURCHASE_REQUESTED event, and one of the PHPurchaseResolution constants indicating the result of the transaction.  To report purchases that were not originated via PlayHaven VGP responses, use trackIAPResolution() instead.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.playhaven.xml#PHPurchase"><linktext>com.playhaven.PHPurchase</linktext></link><link href="com.playhaven.xml#PHPurchaseResolution"><linktext>com.playhaven.PHPurchaseResolution</linktext></link></related-links></apiOperation><apiOperation id="com.playhaven:PlayHaven:sendContentRequest"><apiName>sendContentRequest</apiName><shortdesc>
	 Issues a request for placement content to the PlayHaven server.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>placementId</apiItemName><apiType value="String"/><apiDesc>the placement id, set in the PlayHaven dashboard, for which to request content
	 </apiDesc></apiParam><apiParam><apiItemName>showOverlayImmediately</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>if set true, on iOS, the content modal window will be displayed in an empty state before the data has loaded
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Issues a request for placement content to the PlayHaven server.
	 
	 After the request completes successfully, PlayHavenEvent.CONTENT_OVERLAY_DISPLAYED will be dispatched, and a modal overlay with the content will be displayed to the user.  You may wish to stop sounds or animation in your game upon receipt of this callback.  After the content has been dismissed, PlayHavenEvent.CONTENT_OVERLAY_DISMISSED will be dispatched.
	 
	 If the content request fails, PlayHavenEvent.CONTENT_FAILED will be dispatched.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.playhaven.events.xml#PlayHavenEvent"><linktext>com.playhaven.events.PlayHavenEvent</linktext></link></related-links></apiOperation><apiOperation id="com.playhaven:PlayHaven:sendMetaDataRequest"><apiName>sendMetaDataRequest</apiName><shortdesc>
	 Issues a metadata request for the given placement to the PlayHaven server.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>placementId</apiItemName><apiType value="String"/><apiDesc>the placement id, set in the PlayHaven dashboard, for which to request metadata
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Issues a metadata request for the given placement to the PlayHaven server.  Upon completion, PlayHavenEvent.METADATA_LOADED will be dispatched, and its placementId and metadata properties will be populated with the returned data.
	 
	 If the request fails, PlayHavenEvent.METADATA_FAILED will be dispatched.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.playhaven.events.xml#PlayHavenEvent"><linktext>com.playhaven.events.PlayHavenEvent</linktext></link></related-links></apiOperation><apiOperation id="com.playhaven:PlayHaven:setOptOutStatus"><apiName>setOptOutStatus</apiName><shortdesc>
	 Set the OptOut Status for data collection on this user.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>shouldOptOut</apiItemName><apiType value="Boolean"/><apiDesc>whether to opt the user out of data collection
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Set the OptOut Status for data collection on this user.  Optionally, you may implement an 'opt out' switch in your user interface, and update the reporting OptOut state with this message.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.playhaven:PlayHaven:trackIAPResolution"><apiName>trackIAPResolution</apiName><shortdesc>
	 When integrating in-app purchases via another extension, and you wish to track the purchase resolution through PlayHaven, but the purchase did not originate via VGP, use this method after a purchase has completed to notify the PlayHaven server of the purchase.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if resolution is not one of PHPurchaseResolution.BUY, PHPurchaseResolution.ERROR, PHPurchaseResolution.CANCEL, or PHPurchaseResolution.FAILURE
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>productId</apiItemName><apiType value="String"/><apiDesc>the product ID of the in-app purchase item to track
	 </apiDesc></apiParam><apiParam><apiItemName>quantity</apiItemName><apiType value="int"/><apiDesc>the quantity of products purchase
	 </apiDesc></apiParam><apiParam><apiItemName>resolution</apiItemName><apiType value="String"/><apiDesc>the resolution of the transaction; one of PHPurchaseResolution constants
	 </apiDesc></apiParam><apiParam><apiItemName>receipt</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>	Optionally, send the purchase receipt to PlayHaven for validation tracking
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 When integrating in-app purchases via another extension, and you wish to track the purchase resolution through PlayHaven, but the purchase did not originate via VGP, use this method after a purchase has completed to notify the PlayHaven server of the purchase.  You must pass in the product ID, quantity purchased, and one of the PHPurchaseResolution constants indicating the result of the transaction.  To report purchases that were originated via PlayHaven VGP responses, use reportVGPPurchaseResolution() instead.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.playhaven.xml#PHPurchaseResolution"><linktext>com.playhaven.PHPurchaseResolution</linktext></link></related-links></apiOperation><apiValue id="com.playhaven:PlayHaven:VERSION"><apiName>VERSION</apiName><shortdesc> Version </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1.13.1.a.1.12.5.e.3</apiData><apiType value="String"/></apiValueDef><apiDesc> Version </apiDesc></apiValueDetail></apiValue><apiValue id="com.playhaven:PlayHaven:playhaven:get"><apiName>playhaven</apiName><shortdesc>
	 The current instance of the PlayHaven singelton.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>com.playhaven:PlayHaven</apiValueClassifier><apiException><apiDesc>if PlayHaven.create() was not called before first accessing this property.
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The current instance of the PlayHaven singelton.  You must call PlayHaven.create() before this property is available.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.playhaven:PHPurchaseResolution"><apiName>PHPurchaseResolution</apiName><shortdesc> PHPurchase Resolution </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> PHPurchase Resolution </apiDesc></apiClassifierDetail><apiValue id="com.playhaven:PHPurchaseResolution:BUY"><apiName>BUY</apiName><shortdesc> The user was offered a purchasable good and purchased it successfully </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>buy</apiData><apiType value="String"/></apiValueDef><apiDesc> The user was offered a purchasable good and purchased it successfully </apiDesc></apiValueDetail></apiValue><apiValue id="com.playhaven:PHPurchaseResolution:CANCEL"><apiName>CANCEL</apiName><shortdesc> The user was offered a good but did not choose to purchase it </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiType value="String"/></apiValueDef><apiDesc> The user was offered a good but did not choose to purchase it </apiDesc></apiValueDetail></apiValue><apiValue id="com.playhaven:PHPurchaseResolution:ERROR"><apiName>ERROR</apiName><shortdesc> An error occurred during the purchase process </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc> An error occurred during the purchase process </apiDesc></apiValueDetail></apiValue><apiValue id="com.playhaven:PHPurchaseResolution:FAILURE"><apiName>FAILURE</apiName><shortdesc> The SDK was not able to confirm price and currency information for the good </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>failure</apiData><apiType value="String"/></apiValueDef><apiDesc> The SDK was not able to confirm price and currency information for the good </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.playhaven:PHPurchase"><apiName>PHPurchase</apiName><shortdesc> PHPurchase </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> PHPurchase </apiDesc></apiClassifierDetail><apiConstructor id="com.playhaven:PHPurchase:PHPurchase"><apiName>PHPurchase</apiName><shortdesc> Create New PHPurchase </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Create New PHPurchase </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="com.playhaven:PHPurchase:productId"><apiName>productId</apiName><shortdesc> Product Identifier </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Product Identifier </apiDesc></apiValueDetail></apiValue><apiValue id="com.playhaven:PHPurchase:quantity"><apiName>quantity</apiName><shortdesc> Quantity </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc> Quantity </apiDesc></apiValueDetail></apiValue><apiValue id="com.playhaven:PHPurchase:receipt"><apiName>receipt</apiName><shortdesc> Receipt String </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Receipt String </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>